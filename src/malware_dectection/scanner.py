import hashlib
import pefile
import yara

class MalwareScanner:
    def __init__(self):
        self.rules = yara.compile(filepath='src/malware_detection/yara_rules/index.yar')
        
    def calculate_entropy(self, data):
        """Check for obfuscated code using Shannon entropy"""
        entropy = 0
        if not data:
            return 0
        for x in range(256):
            p_x = float(data.count(x))/len(data)
            if p_x > 0:
                entropy += - p_x * math.log(p_x, 2)
        return entropy

    def scan_file(self, file_path):
        # Signature-based detection
        with open(file_path, 'rb') as f:
            file_hash = hashlib.sha256(f.read()).hexdigest()
        
        # Heuristic analysis
        pe = pefile.PE(file_path)
        suspicious_sections = [section for section in pe.sections 
                             if self.calculate_entropy(section.get_data()) > 6.5]
        
        # YARA rule matching
        matches = self.rules.match(file_path)
        
        return {
            'hash': file_hash,
            'entropy_warnings': len(suspicious_sections),
            'yara_matches': [str(m) for m in matches]
        }